
declare module readArr;

<<module arraySum>>
takes input[list:array[a..b] of    real, n:integer];  
returns[sum:real];
start
	declare index:integer;
	declare index2:integer;
	declare t:boolean;
	sum:=0.0;
	for(index in  1..15)
	start
		t:= index<=n;
		declare A:array[index..index] of real;
		list := A;
		switch(t)
		start
			case true: declare index:integer;
			print(list[index]);
				   sum:=sum+list[index];
				   break;
			case false: print(sum);
				    print(index);
				    **prints the values of sum and index  15-n times**
				    break;
		end
		** no need to increment the value of index as it will be taken care by the semantic rules associated with for construct, but an increment statement does not make its syntax incorrect**
	end
	print(sum);
end

<<<driver program>>>
start
	declare a,b:integer;
	declare A:array[a..b] of real; 
	b:=15;
	a:=1;
	declare k:integer;
	declare s:real;
	get_value(k);
	use module readArr with parameters A,k;
	[s]:= use module arraySum with parameters A,k;
	print(s);
end


**The following module reads k  values one by one**
** the array elements are populated with the read values**
**The array variable is not returned as the translation will**
**use the same locations for array elements**

<<module readArr>>
takes input [arr1:array[1..15] of real,k:integer];
start
	declare tempvar:real;
	declare i,k:integer;
	i:=1;
	arr1[2] := 5.2;
	while(i<=k)
	start
		get_value(tempvar);
		arr1[i]:=tempvar;
		i:=i+1;
		** the semantics of while needs an increment and will be taken care of at the second phase**
	end
end

